!-*-f90-*-

#define PP_EXT
#define VERBOSITY 0

!------------------------------------!
!!file IO
! path to cubepm root directory
character(*), parameter :: cubepm_root    = '/scratch/dbi208/PBH/N_BH_SIMS_HFIX/N_bh_10000_NDC/source/workdir/'
! path to simulation output
character(*), parameter :: output_path    = '/scratch/dbi208/PBH/N_BH_SIMS_HFIX/N_bh_10000_NDC/'
! path to local scratch
character(*), parameter :: scratch_path   = output_path
! path to initial conditions
character(*), parameter :: ic_path        = output_path
! transfer functions
integer, parameter      :: nk             = 1000
!character(len=*), parameter :: fntf       = cubepm_root//'transfer/dmbh/tk_fine.dat'
character(len=*), parameter :: fntf       = cubepm_root//'transfer/dmbh/tk_fine_z999999.dat'
character(len=*), parameter :: vfntf      = ''
! file containing checkpoints
character(*), parameter :: checkpoints    = cubepm_root//'input/checkpoints_dmbh'

!------------------------------------!
!!Simulation parameters
! nodes / dimension, total nodes = nodes_dim**3
integer(4),   parameter :: nodes_dim      = 1
! fine mesh tiles / node / dimension
integer(4),   parameter :: tiles_node_dim = 2
! cores / node
integer(4),   parameter :: cores          = 8
! nested threads
integer(4),   parameter :: nested_threads = 1
! density buffer fraction (1.0 == no buffer, 2.0 == 2x avg density, etc)
real(4), parameter :: density_buffer      = 2.5
! size of fine mesh tile in cells / dimension 
integer(4),   parameter :: nf_tile        = 240!176
! Fine mesh force cut-off in fine mesh cells (determined by kernel)
integer(4),   parameter :: nf_cutoff      = 16
! Fine mesh buffer size in fine mesh cells
integer(4),   parameter :: nf_buf         = nf_cutoff + 8
! Number of fine cells
#ifndef COARSE_HACK
integer(4),   parameter :: nc             = (nf_tile-2*nf_buf)*tiles_node_dim*nodes_dim
#else
! Used in cic_*.f90 to compute on smaller grids
integer, parameter :: coarsen_factor = 2
integer(4),   parameter :: nc             = (nf_tile-2*nf_buf)*tiles_node_dim*nodes_dim / coarsen_factor
#endif
! controls number of cdm particles relative to neutrinos
integer(4),   parameter :: ratio_nudm_dim = 1 !not used
! body centered(1) or simple cubic(0) lattice
integer(4),   parameter :: bcc            = 1
! number of primordial black holes (total)
integer(4),   parameter :: n_bh           = 10000

!------------------------------------!
!!cosmology parameters
! box size / dim (Mpc/h)
real(4),      parameter :: box            = 0.030 
! initial redshifts
real(4),      parameter :: z_i            = 999999.0
real(4),      parameter :: z_i_nu         = z_i
real(4),      parameter :: z_tf           = z_i !not used
! hubble rate
real(4),      parameter :: H0             = 67.5
! initial conditions
real(4),     parameter :: A_s             = 2.15e-9
real(4),     parameter :: n_s             = 0.966
real(4),     parameter :: k_o             = 0.05/(H0/100.0) !h/Mpc
real(4),     parameter :: sigma_8         = 0.0 !not used
! matter
!  non-baryonic matter
real(4),      parameter :: omega_cp       = 0.26
!   primordial black holes
real(4),      parameter :: e_bh          = n_bh/((1.0+bcc)*(nc/2.0)**3.0) !for convenience
real(4),      parameter :: f_bh          = n_bh*1e-5 !e_bh/(1.0+e_bh) !fraction of "omega_c" in pbh
real(4),      parameter :: omega_p       = f_bh*omega_cp
!   cold dark matter
real(4),      parameter :: omega_c        = (1.-f_bh)*omega_cp
!  baryons: homogeneous only, no hydro
real(4),      parameter :: omega_b        = 0.05 
!  neutrino parameters
real(4),      parameter :: N_massive_nu   = 0.0
real(4),      parameter :: mass_neutrino  = 0.0
real(4),      parameter :: omega_nu       = omega_p !we map pbh onto neutrinos in cubep3m
!  total matter
real(4),      parameter :: omega_m        = omega_nu+omega_c+omega_b
! radiation
!  photons
!real(4),      parameter :: omega_g        = 5.429338e-5
!  massless neutrinos
!real(4),      parameter :: N_eff          = 3.046
!real(4),      parameter :: omega_r        = omega_g*(1.+N_eff*(7./8.)*(4./11.)**(4./3.))
!real(4),      parameter :: a_eq           = omega_r/omega_m
real(4),       parameter :: z_eq           = 3374.0
real(4),       parameter :: a_eq           = 1./(1.+z_eq)
real(4),       parameter :: omega_r        = omega_m*a_eq
! dark energy
real(4),      parameter :: omega_l        = 1.0-omega_m-omega_r
real(4),      parameter :: wde            = -1.
